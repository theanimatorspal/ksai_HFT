#pragma once
#include <ksai_config.hpp>

namespace hft {
using namespace ksai;
enum class event {
    ///@note ALl of these events are generated by AI

    // 🏦 Macro & Economic
    change_in_interest_rate,
    inflation_rise,
    inflation_fall,
    deflation,
    recession,
    prosperity,
    change_in_global_economy,
    reports_of_economic_indicators,
    employment_data_release,
    gdp_announcement,
    trade_balance_report,
    central_bank_meeting,
    government_policy_change,
    new_tax_laws,
    fiscal_stimulus,
    sanctions_announced,

    // 📉 Market-Specific
    earnings_report,
    dividend_announcement,
    stock_split,
    acquisition_merger_news,
    insider_trading_news,
    large_fund_liquidation,
    short_squeeze,
    ipo_announcement,

    // 🌍 Geo-Political
    war_breakout,
    peace_agreement,
    diplomatic_tensions,
    election_result,
    political_instability,
    cyberattack_on_infrastructure,

    // 🌪️ Natural / External
    natural_disaster,
    pandemic_news,
    energy_crisis,
    oil_price_spike,
    commodity_price_crash,

    // 🤖 Sentiment / Tech
    opinion_of_the_public,
    viral_news_on_social_media,
    hedge_fund_opinion,
    market_sentiment_bullish,
    market_sentiment_bearish,
    sudden_volume_surge,
    unexpected_volatility,

    // 🔧 Technical Triggers
    crossing_moving_average,
    price_breaks_support,
    price_breaks_resistance,
    flash_crash_detected,

    // 🧘 Default
    nothing
};

struct trader {

};

struct stock {

};

struct portfolio {

};

struct order {

};

struct orderBook {

};

struct market {
          ///@note somethings
          double m_interest_rate = 1.0;
          double factors = 1.0;

          ///@note random Devices
          randev m_rd;
          rangen m_generator; /// std::mt19937 generator

          ///@note stuffs
          v<sp<trader>> m_traders;

          ///@note mutexes
          mtx m_fluctuation_mtx;
          mtx m_order_mtx;
          mtx m_trade_mtx;
          mtx m_event_mtx;

          market() {}
          void InitTraders() {}
          void InitStocks() {}

          void Run() {}
          void Reset() {}
          void Flutuate() {}

          void GenerateMarketEvent() {}
          void ExecuteOrderBook() {}
          void ApplyMarketImpact() {}
};

}
